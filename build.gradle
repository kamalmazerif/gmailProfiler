group 'test.groupid'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'com.google.apis:google-api-services-gmail:v1-rev34-1.21.0'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.20.0'
    //compile 'com.google.apis:google-api-services-gmail:v1-rev29-1.20.0' // holy @#$ dude

    // compile 'com.google.gcloud:gcloud-java:0.1.1' // Looks like this is for appengine or some other cloud stuff
    compile 'com.google.apis:google-api-services-pubsub:v1-rev7-1.21.0'


    compile 'com.h2database:h2:1.3.176'
    compile 'com.j256.ormlite:ormlite-jdbc:4.48'
}



//
//apply plugin: 'java'
//
//sourceCompatibility = 1.5
//version = '1.0'
//
//repositories {
//    mavenCentral()
//}
//
//dependencies {
//    testCompile group: 'junit', name: 'junit', version: '4.11'
//}
//
def backupDir = 'db_backup'
def backupDirAppend

task backupDb(type: Copy) {
    from 'db'
    into backupDir
    include '*'

    eachFile { fcp ->
//        def dateStr = (new Date()).format("YYYY-MM-dd--HH-mm-ss");
//        fcp.setRelativePath(new RelativePath(false, (new Date()).format("YYYY-MM-dd--HH-mm-ss")))
        println 'getName was: ' + fcp.getName()
        println 'getPath was: ' + fcp.getPath()
        println 'Name was: ' + fcp.name
        println 'Path was: ' + fcp.path
        fcp.path = backupDirAppend + '/' + name
        println 'getName is now: ' + fcp.getName()
        println 'getPath is now: ' + fcp.getPath()
        println 'Name is now: ' + fcp.name
        println 'Path is now: ' + fcp.path
    }
}

backupDb {}.doFirst {
    backupDirAppend = (new Date()).format("YYYY-MM-dd--HH-mm-ss")
    def dirToCreate = backupDir + '\\' + backupDirAppend
    mkdir dirToCreate
    println 'Backing Up Database, backup directory set to: ' + dirToCreate

}

backupDb {}.doLast {
    println 'Backing Up Database to: ' + backupDir
}